# Copyright 2016 The Fuchsia Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//magma/gnbuild/magma.gni")

action("glsl_parser") {
  output_header_name = "glsl_parser.h"
  output_impl_name = "glsl_parser.cpp"

  script = "$mesa_build_root/src/compiler/glsl/bash_script_wrapper.py"

  outputs = [
    "$target_gen_dir/$output_header_name",
    "$target_gen_dir/$output_impl_name",
  ]

  inputs = [
    "glsl_parser.yy",
  ]

  args = [
    "yacc",
    "-o",
    rebase_path(target_gen_dir) + "/$output_impl_name",
    "-p",
    "_mesa_glsl_",
    "--defines=" + rebase_path(target_gen_dir) + "/$output_header_name",
    rebase_path(".") + "/glsl_parser.yy",
  ]
}

action("glsl_lexer") {
  input_name = "glsl_lexer.ll"
  output_name = "glsl_lexer.cpp"

  script = "$mesa_build_root/src/compiler/glsl/bash_script_wrapper.py"

  outputs = [
    "$target_gen_dir/$output_name",
  ]

  inputs = [
    input_name,
  ]

  args = [
    "lex",
    "-o",
    rebase_path(target_gen_dir) + "/$output_name",
    rebase_path(".") + "/$input_name",
  ]
}

action("glcpp_parser") {
  output_header_name = "glcpp/glcpp-parse.h"
  output_impl_name = "glcpp/glcpp-parse.c"

  script = "$mesa_build_root/src/compiler/glsl/bash_script_wrapper.py"

  outputs = [
    "$target_gen_dir/$output_header_name",
    "$target_gen_dir/$output_impl_name",
  ]

  inputs = [
    "glcpp/glcpp-parse.y",
  ]

  args = [
    "yacc",
    "-o",
    rebase_path(target_gen_dir) + "/$output_impl_name",
    "-p",
    "glcpp_parser_",
    "--defines=" + rebase_path(target_gen_dir) + "/$output_header_name",
    rebase_path(".") + "/glcpp/glcpp-parse.y",
  ]
}

action("glcpp_lexer") {
  input_name = "glcpp/glcpp-lex.l"
  output_name = "glcpp/glcpp-lex.c"

  script = "$mesa_build_root/src/compiler/glsl/bash_script_wrapper.py"

  outputs = [
    "$target_gen_dir/$output_name",
  ]

  inputs = [
    input_name,
  ]

  args = [
    "lex",
    "-o",
    rebase_path(target_gen_dir) + "/$output_name",
    rebase_path(".") + "/$input_name",
  ]
}

config("gen_public_config") {
  include_dirs = [
    target_gen_dir,
    "$target_gen_dir/glcpp",
  ]
}

source_set("gen") {
  public_configs = [ ":gen_public_config" ]

  include_dirs = [
    ".",
    "glcpp",
  ]

  cflags_cc = [ "-fpermissive" ]

  deps = [
    ":glcpp_lexer",
    ":glcpp_parser",
    ":glsl_lexer",
    ":glsl_parser",
    "$mesa_build_root/src/mapi/glapi",
    "$mesa_build_root/src/mesa/program",
    "$mesa_build_root/src/util",
  ]

  sources = [
    "$target_gen_dir/glcpp/glcpp-lex.c",
    "$target_gen_dir/glcpp/glcpp-parse.c",
    "$target_gen_dir/glcpp/glcpp-parse.h",
    "$target_gen_dir/glsl_lexer.cpp",
    "$target_gen_dir/glsl_parser.cpp",
    "$target_gen_dir/glsl_parser.h",
  ]
}

source_set("glsl") {
  public_configs = [ "$mesa_build_root/src:common_config" ]

  deps = [
    ":gen",
    "glcpp",
    "$mesa_build_root/src/mapi/glapi",
    "$mesa_build_root/src/util",
  ]

  include_dirs = [ "$mesa_build_root/src/mesa" ]

  sources = [
    "ast.h",
    "ast_array_index.cpp",
    "ast_expr.cpp",
    "ast_function.cpp",
    "ast_to_hir.cpp",
    "ast_type.cpp",
    "blob.c",
    "blob.h",
    "builtin_functions.cpp",
    "builtin_types.cpp",
    "builtin_variables.cpp",
    "glcpp",
    "glsl_parser_extras.cpp",
    "glsl_parser_extras.h",
    "glsl_symbol_table.cpp",
    "glsl_symbol_table.h",
    "hir_field_selection.cpp",
    "ir.cpp",
    "ir.h",
    "ir_basic_block.cpp",
    "ir_basic_block.h",
    "ir_builder.cpp",
    "ir_builder.h",
    "ir_clone.cpp",
    "ir_constant_expression.cpp",
    "ir_equals.cpp",
    "ir_expression_flattening.cpp",
    "ir_expression_flattening.h",
    "ir_function.cpp",
    "ir_function_can_inline.cpp",
    "ir_function_detect_recursion.cpp",
    "ir_function_inlining.h",
    "ir_hierarchical_visitor.cpp",
    "ir_hierarchical_visitor.h",
    "ir_hv_accept.cpp",
    "ir_import_prototypes.cpp",
    "ir_optimization.h",
    "ir_print_visitor.cpp",
    "ir_print_visitor.h",
    "ir_reader.cpp",
    "ir_reader.h",
    "ir_rvalue_visitor.cpp",
    "ir_rvalue_visitor.h",
    "ir_set_program_inouts.cpp",
    "ir_uniform.h",
    "ir_validate.cpp",
    "ir_variable_refcount.cpp",
    "ir_variable_refcount.h",
    "ir_visitor.h",
    "link_atomics.cpp",
    "link_functions.cpp",
    "link_interface_blocks.cpp",
    "link_uniform_block_active_visitor.cpp",
    "link_uniform_block_active_visitor.h",
    "link_uniform_blocks.cpp",
    "link_uniform_initializers.cpp",
    "link_uniforms.cpp",
    "link_varyings.cpp",
    "link_varyings.h",
    "linker.cpp",
    "linker.h",
    "list.h",
    "loop_analysis.cpp",
    "loop_analysis.h",
    "loop_controls.cpp",
    "loop_unroll.cpp",
    "lower_buffer_access.cpp",
    "lower_buffer_access.h",
    "lower_clip_distance.cpp",
    "lower_const_arrays_to_uniforms.cpp",
    "lower_discard.cpp",
    "lower_discard_flow.cpp",
    "lower_if_to_cond_assign.cpp",
    "lower_instructions.cpp",
    "lower_jumps.cpp",
    "lower_mat_op_to_vec.cpp",
    "lower_named_interface_blocks.cpp",
    "lower_noise.cpp",
    "lower_offset_array.cpp",
    "lower_output_reads.cpp",
    "lower_packed_varyings.cpp",
    "lower_packing_builtins.cpp",
    "lower_shared_reference.cpp",
    "lower_subroutine.cpp",
    "lower_tess_level.cpp",
    "lower_texture_projection.cpp",
    "lower_ubo_reference.cpp",
    "lower_variable_index_to_cond_assign.cpp",
    "lower_vec_index_to_cond_assign.cpp",
    "lower_vec_index_to_swizzle.cpp",
    "lower_vector.cpp",
    "lower_vector_derefs.cpp",
    "lower_vector_insert.cpp",
    "lower_vertex_id.cpp",
    "opt_algebraic.cpp",
    "opt_array_splitting.cpp",
    "opt_conditional_discard.cpp",
    "opt_constant_folding.cpp",
    "opt_constant_propagation.cpp",
    "opt_constant_variable.cpp",
    "opt_copy_propagation.cpp",
    "opt_copy_propagation_elements.cpp",
    "opt_dead_builtin_variables.cpp",
    "opt_dead_builtin_varyings.cpp",
    "opt_dead_code.cpp",
    "opt_dead_code_local.cpp",
    "opt_dead_functions.cpp",
    "opt_flatten_nested_if_blocks.cpp",
    "opt_flip_matrices.cpp",
    "opt_function_inlining.cpp",
    "opt_if_simplification.cpp",
    "opt_minmax.cpp",
    "opt_noop_swizzle.cpp",
    "opt_rebalance_tree.cpp",
    "opt_redundant_jumps.cpp",
    "opt_structure_splitting.cpp",
    "opt_swizzle_swizzle.cpp",
    "opt_tree_grafting.cpp",
    "opt_vectorize.cpp",
    "program.h",
    "s_expression.cpp",
    "s_expression.h",
  ]
}
