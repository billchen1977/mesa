/*
 * C11 <threads.h> emulation library
 *
 * (C) Copyright yohhoy 2012.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare [[derivative work]]s of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <stdlib.h>
#ifndef assert
#include <assert.h>
#endif
#include <limits.h>
#include <errno.h>
#include <unistd.h>
#include <sched.h>
#include <stdint.h> /* for intptr_t */
#include <stdio.h>
#include <time.h>

#include <runtime/mutex.h>
#include <runtime/tls.h>

/*---------------------------- macros ----------------------------*/
#define ONCE_FLAG_INIT 0

// FIXME: temporary non-standard hack to ease transition
#define _MTX_INITIALIZER_NP MXR_MUTEX_INIT

/*---------------------------- types ----------------------------*/
typedef int         cnd_t;
typedef int         thrd_t;
typedef mxr_tls_t   tss_t;
typedef mxr_mutex_t mtx_t;
typedef int         once_flag;


/*--------------- 7.25.2 Initialization functions ---------------*/
// 7.25.2.1
static inline void
call_once(once_flag *flag, void (*func)(void))
{
    printf("UNIMPLEMENTED - call_once\n");
}


/*------------- 7.25.3 Condition variable functions -------------*/
// 7.25.3.1
static inline int
cnd_broadcast(cnd_t *cond)
{
    assert(cond != NULL);
    printf("UNIMPLEMENTED - cnd_broadcast\n");
    return thrd_error;
}

// 7.25.3.2
static inline void
cnd_destroy(cnd_t *cond)
{
    assert(cond);
    printf("UNIMPLEMENTED - cnd_destroy\n");
}

// 7.25.3.3
static inline int
cnd_init(cnd_t *cond)
{
    assert(cond != NULL);
    printf("UNIMPLEMENTED - cnd_init\n");
    return thrd_error;
}

// 7.25.3.4
static inline int
cnd_signal(cnd_t *cond)
{
    assert(cond != NULL);
    printf("UNIMPLEMENTED - cnd_signal\n");
    return thrd_error;
}

// 7.25.3.5
static inline int
cnd_timedwait(cnd_t *cond, mtx_t *mtx, const xtime *xt)
{
    printf("UNIMPLEMENTED: cnd_timedwait\n");
    return thrd_error;
}

// 7.25.3.6
static inline int
cnd_wait(cnd_t *cond, mtx_t *mtx)
{
    printf("UNIMPLEMENTED: cnd_wait\n");
    return thrd_error;
}


/*-------------------- 7.25.4 Mutex functions --------------------*/


// 7.25.4.1
static inline void
mtx_destroy(mtx_t *mtx)
{
    // Nothing to do.
    assert(mtx != NULL);
}

// 7.25.4.2
static inline int
mtx_init(mtx_t *mtx, int type)
{
    *mtx = MXR_MUTEX_INIT;
    return thrd_success;
}

// 7.25.4.3
static inline int
mtx_lock(mtx_t *mtx)
{
    assert(mtx != NULL);
    mxr_mutex_lock(mtx);
    return thrd_success;
}

static inline int
mtx_trylock(mtx_t *mtx);

static inline void
thrd_yield(void);

// 7.25.4.4
static inline int
mtx_timedlock(mtx_t *mtx, const xtime *xt)
{
    printf("UNIMPLEMENTED: mtx_timedlock\n");
    return thrd_error;
}

// 7.25.4.5
static inline int
mtx_trylock(mtx_t *mtx)
{
    assert(mtx != NULL);
    return mxr_mutex_trylock(mtx) == NO_ERROR;
}

// 7.25.4.6
static inline int
mtx_unlock(mtx_t *mtx)
{
    assert(mtx != NULL);
    mxr_mutex_unlock(mtx);
    return thrd_success;
}


/*------------------- 7.25.5 Thread functions -------------------*/
// 7.25.5.1
static inline int
thrd_create(thrd_t *thr, thrd_start_t func, void *arg)
{
    printf("UNIMPLEMENTED - thrd_create\n");
    return thrd_error;
}

// 7.25.5.2
static inline thrd_t
thrd_current(void)
{
    printf("UNIMPLEMENTED - thread_current\n");
    return (thrd_t)1;
}

// 7.25.5.3
static inline int
thrd_detach(thrd_t thr)
{
    printf("UNIMPLEMENTED - thrd_detach\n");
    return thrd_error;
}

// 7.25.5.4
static inline int
thrd_equal(thrd_t thr0, thrd_t thr1)
{
    printf("UNIMPLEMENTED - thrd_equal\n");
    return thrd_error;
}

// 7.25.5.5
static inline void
thrd_exit(int res)
{
    printf("UNIMPLEMENTED - thrd_exit\n");
}

// 7.25.5.6
static inline int
thrd_join(thrd_t thr, int *res)
{
    printf("UNIMPLEMENTED - thrd_join\n");
    return thrd_error;
}

// 7.25.5.7
static inline void
thrd_sleep(const xtime *xt)
{
    struct timespec req;
    assert(xt);
    req.tv_sec = xt->sec;
    req.tv_nsec = xt->nsec;
    nanosleep(&req, NULL);
}

// 7.25.5.8
static inline void
thrd_yield(void)
{
    sched_yield();
}

/*----------- 7.25.6 Thread-specific storage functions -----------*/
// 7.25.6.1
static inline int
tss_create(tss_t *key, tss_dtor_t dtor)
{
    assert(key != NULL);
    *key = mxr_tls_allocate();
    return thrd_success;
}

// 7.25.6.2
static inline void
tss_delete(tss_t key)
{
}

// 7.25.6.3
static inline void *
tss_get(tss_t key)
{
    return mxr_tls_get(key);
}

// 7.25.6.4
static inline int
tss_set(tss_t key, void *val)
{
    mxr_tls_set(key, val);
    return thrd_success;
}


/*-------------------- 7.25.7 Time functions --------------------*/
// 7.25.6.1
static inline int
xtime_get(xtime *xt, int base)
{
    if (!xt) return 0;
    if (base == TIME_UTC) {
        xt->sec = time(NULL);
        xt->nsec = 0;
        return base;
    }
    return 0;
}
